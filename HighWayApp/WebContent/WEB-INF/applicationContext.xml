<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
     
	<!-- Configurer that replaces ${...} placeholders with values from properties 
		files -->
	<!-- (in this case, mail and JDBC related properties) -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/jdbc.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="false"/>
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages</value>
				<value>screen</value>
			</list>
		</property>
	</bean>

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Local Apache Commons DBCP DataSource that refers to a combined database -->
	<!-- The placeholders are resolved from jdbc.properties through -->
	<!-- the PropertyPlaceholderConfigurer in applicationContext.xml -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

    <!-- 
	<jdbc:initialize-database data-source="dataSource"
		ignore-failures="ALL">
		<jdbc:script location="classpath:highwayapp.sql" />
	</jdbc:initialize-database>
     -->
	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<context:annotation-config />
	<!-- enable component scanning and autowire (beware that this does not enable 
		mapper scanning!) -->
	<context:component-scan base-package="com.djb.highway">
		<context:include-filter type="regex" expression=".*.action" />
		<context:include-filter type="regex" expression=".*.service" />
	</context:component-scan>

    <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations"
            value="classpath*:com/djb/highway/**/*.xml" />
        <property name="typeAliasesPackage" value="com.djb.highway.*.entity" />
    </bean>
    
    <!-- define the sqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        <!-- <constructor-arg index="1" value="BATCH" /> -->
    </bean>
    
    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.djb.highway.*.dao" />
    </bean>

    <aop:config>
        <aop:advisor pointcut="execution(* com.djb.highway.*.service..*.*(..))"
            advice-ref="txAdvice" />
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED"
                rollback-for="Exception" read-only="false" />
        </tx:attributes>
    </tx:advice>
    <!--  
    <bean id="logInterceptor" class="com.djb.highway.framework.log.LogInterceptor" />

    <aop:config proxy-target-class="true">
        <aop:aspect id="aspectBean" ref="logInterceptor">
            <aop:pointcut id="point"
                expression="execution(* com.djb.highway.*.service..*.*(..))" />
            <aop:before pointcut-ref="point" method="doBefore" />
            <aop:after pointcut-ref="point" method="doAfter"/>
        </aop:aspect>
    </aop:config>
     --> 
</beans>
