/**
 * Project Name:MedicalUnicomAPP
 * File Name:PatientAction.java
 * Package Name:com.djb.ylt.user.action
 * Copyright © 大连必捷必信息技术有限公司  All Rights Reserved.
*/

package com.djb.ylt.user.action;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;

import com.djb.ylt.alipay.action.AsynAlipayNotifyAction;
import com.djb.ylt.alipay.config.AlipayConfig;
import com.djb.ylt.alipay.util.SignUtils;

import com.djb.ylt.common.util.Constants;
import com.djb.ylt.common.util.OrderNumberUtil;
import com.djb.ylt.common.util.ResourceLocator;

import com.djb.ylt.framework.action.BaseAction;

import com.djb.ylt.user.dto.EmergencyDoctorDTO;
import com.djb.ylt.user.dtoclient.AppointInsertClientDTO;
import com.djb.ylt.user.entity.AppointInquiryEntity;
import com.djb.ylt.user.entity.EmergencyDoctorEntity;
import com.djb.ylt.user.service.IAppointInquiryService;
import com.djb.ylt.user.service.IEmergencyDoctorService;

/**
 * <p>
 * <strong>类名: </strong>
 * </p>
 * PatientAction <br/>
 * <p>
 * <strong>功能说明: </strong>
 * </p>
 * 这个类是封装那个哪个模块，起什么用的，需要手动填写. <br/>
 * <p>
 * <strong>创建日期: </strong><br/>
 * </p>
 * 2016年7月29日下午1:19:01 <br/>
 * 
 * @author 林行
 * @version 1.0
 * @since JDK 1.8
 */

@Controller("/EmergencyDoctor")
public class EmergencyDoctorAction extends BaseAction {

	@Autowired
	@Qualifier("iEmergencyDoctorService")
	private IEmergencyDoctorService iEmergencyDoctorService;

	@Autowired
	@Qualifier("iAppointInquiryService")
	private IAppointInquiryService iAppointInquiryService;

	public EmergencyDoctorAction() {
		super();
	}

	/**
	 * 预约问诊
	 * 
	 * @param mapping
	 *            The ActionMapping used to select this instance
	 * @param form
	 *            The optional ActionForm bean for this request
	 * @param request
	 *            The servlet request we are processing
	 * @param response
	 *            The servlet response we are creating
	 * 
	 * @exception Exception
	 *                if business logic throws an exception
	 */
	public ActionForward doAppointEmergency(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		// 参数DTO
		EmergencyDoctorDTO paramDTO = (EmergencyDoctorDTO) form;
		// 参数Entity
		EmergencyDoctorEntity paramEntity = new EmergencyDoctorEntity();

		// 结果ClientDTO
		AppointInsertClientDTO resultClientDTO = new AppointInsertClientDTO();
		StringBuffer stringBuffer = new StringBuffer();
		// DB查询
		try {

			paramEntity = iEmergencyDoctorService.getObject();
			AppointInquiryEntity appointInquiryEntity = new AppointInquiryEntity();
			if (paramEntity != null) {
				// 参数Entity
				// 日期时间戳

				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
				String str = sdf.format(date);
				stringBuffer.append(str);
				// 订单号（程序自动生成）
				OrderNumberUtil orderNumberUtil = new OrderNumberUtil();
				// 采番订单编号
				stringBuffer.append(orderNumberUtil.getOrderNumber(request));
				appointInquiryEntity.setOrderNumber(stringBuffer.toString());
				appointInquiryEntity.setPatientId(paramDTO.getPatientId());
				appointInquiryEntity.setDoctorId(paramEntity.getEdDocid());
				appointInquiryEntity.setAppointType("3");
				if ("0".equals(paramDTO.getTotalFee()) || "0.0".equals(paramDTO.getTotalFee())
						|| "0.00".equals(paramDTO.getTotalFee())) {
					appointInquiryEntity.setPayStatus("1");
				}
				appointInquiryEntity.setBuyTotal(Double.parseDouble(paramDTO.getTotalFee()));
				iAppointInquiryService.addAppointInquiry(appointInquiryEntity);
				if (appointInquiryEntity.getAppointId() != null) {
					resultClientDTO.setAppointId(appointInquiryEntity.getAppointId());
					resultClientDTO.setOrderNumber(stringBuffer.toString());

				} else {
					resultClientDTO.setReturnCode("-1013");
					toJson(response, resultClientDTO);
					return null;
				}
			} else {
				resultClientDTO.setReturnCode("-1013");
				toJson(response, resultClientDTO);
				return null;
			}

			// return 处理
			if (!paramDTO.isErrFlg()) {
				resultClientDTO.setReturnCode("0");
				resultClientDTO.setUserTel(paramEntity.getEdUsertel());
				if (!"0".equals(paramDTO.getTotalFee()) && !"0.0".equals(paramDTO.getTotalFee())
						&& !"0.00".equals(paramDTO.getTotalFee())) {

					// TODO 支付宝URL PAY_TYPE
					String hostIp = ResourceLocator.getI18NMessage(this, Constants.MSG_KEY_HOST_ADDRESS);
					// resultClientDTO.setAliPayURL(hostIp + "Appoint.do?" +
					// "receiveNotify");
					StringBuffer url = new StringBuffer();
					url.append(hostIp);
					url.append("Appoint.do?" + "receiveNotify" + "=");
					url.append("&orderNumber=");
					url.append(stringBuffer.toString());
					String service_url = url.toString();
					String orderContent = AsynAlipayNotifyAction.getOrderInfo(stringBuffer.toString(), "预约急诊", "支付宝支付",
							paramDTO.getTotalFee(), service_url);
					// String sign = StringUtils.sign(orderContent,
					// AlipayConfig.private_key);
					// String sign =
					// StringUtils.buildRequestMysign(orderContent);
					String sign = sign(orderContent);
					try {
						/**
						 * 仅需对sign 做URL编码
						 */
						sign = URLEncoder.encode(sign, "UTF-8");
					} catch (UnsupportedEncodingException e) {
						e.printStackTrace();
					}
					StringBuffer sb = new StringBuffer();
					sb.append(orderContent);
					sb.append("&sign=\"" + sign + "\"&");
					sb.append("sign_type=\"RSA\"");
					// System.out.println(">>>>>>>>>>sb" + sb.toString());
					resultClientDTO.setAliPaySignInfo(sb.toString());
					AppointInquiryEntity payInfoEntity = new AppointInquiryEntity();
					payInfoEntity.setAppointId(appointInquiryEntity.getAppointId());
					payInfoEntity.setOrderNumber(appointInquiryEntity.getOrderNumber());
					payInfoEntity.setPayInfo(sb.toString());
					iAppointInquiryService.updateAppointInquiry(payInfoEntity);
				}
				//Map<String, String> extras = new HashMap<String, String>();
				//extras.put("patientId", paramDTO.getPatientId().toString());
				// extras.put("extra_2", "val2");
				//PushConfig.sendNotificationWithAlias(paramEntity.getEdUsertel(), extras);
			}
		} catch (Exception e) {
			paramDTO.setErrFlg(true);
			resultClientDTO.setReturnCode("-1013");
		}
		// 返回结果
		toJson(response, resultClientDTO);

		return null;
	}

	private String sign(String content) {
		return SignUtils.sign(content, AlipayConfig.private_key);
	}
}
