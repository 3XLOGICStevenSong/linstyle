/**
 * Project Name:MedicalUnicomAPP
 * File Name:PatientAction.java
 * Package Name:com.djb.ylt.user.action
 * Copyright © 大连必捷必信息技术有限公司  All Rights Reserved.
*/

package com.djb.ylt.user.action;




import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;

import com.djb.ylt.common.util.CommonUtil;
import com.djb.ylt.common.util.Constants;
import com.djb.ylt.common.util.ResourceLocator;
import com.djb.ylt.common.util.UploadUtil;
import com.djb.ylt.framework.action.BaseAction;
import com.djb.ylt.framework.dto.BaseClientDTO;
import com.djb.ylt.user.dto.GraphicDTO;
import com.djb.ylt.user.dtoclient.GraphicClientDTO;
import com.djb.ylt.user.dtoclient.GraphicInfoClientDTO;
import com.djb.ylt.user.entity.AppointInquiryEntity;
import com.djb.ylt.user.entity.GraphicEntity;
import com.djb.ylt.user.service.IAppointInquiryService;
import com.djb.ylt.user.service.IGraphicService;

/**
 * <p>
 * <strong>类名: </strong>
 * </p>
 * PatientAction <br/>
 * <p>
 * <strong>功能说明: </strong>
 * </p>
 * 这个类是封装那个哪个模块，起什么用的，需要手动填写. <br/>
 * <p>
 * <strong>创建日期: </strong><br/>
 * </p>
 * 2016年7月29日下午1:19:01 <br/>
 * 
 * @author 林行
 * @version 1.0
 * @since JDK 1.8
 */

@Controller("/Graphic")
public class GraphicAction extends BaseAction {

	@Autowired
	@Qualifier("iGraphicService")
	private IGraphicService iGraphicService;
	
	@Autowired
	@Qualifier("iAppointInquiryService")
	private IAppointInquiryService iAppointInquiryService;

	public GraphicAction() {
		super();
	}

	/**
	 * 获取我的私人医生列表：获取我购买的私人医生 通过用户ID获取
	 * 
	 * @param mapping
	 *            The ActionMapping used to select this instance
	 * @param form
	 *            The optional ActionForm bean for this request
	 * @param request
	 *            The servlet request we are processing
	 * @param response
	 *            The servlet response we are creating
	 * 
	 * @exception Exception
	 *                if business logic throws an exception
	 */
	public ActionForward doInsertGraphic(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		// 参数DTO
		GraphicDTO paramDTO = (GraphicDTO) form;
		// 参数Entity
		GraphicEntity paramEntity = new GraphicEntity();

		// 结果ClientDTO
		CommonUtil.reflectClass(paramDTO, paramEntity);
		// 结果Entity
		// List<AppointInquiryEntity> resultEntity = null;
		BaseClientDTO resultClientDTO = new BaseClientDTO();
		// DB查询
		try {
			if (paramDTO.getGraphicFile() != null && paramDTO.getGraphicFile().getFileSize() > 0) {
				String type = null;
				if ("1".equals(paramDTO.getGraphicType())) {
					type = "image";
				} else if("2".equals(paramDTO.getGraphicType())) {
					type = "voice";
				}
				String filePath = UploadUtil.doUploadVoiceImage(request, response, paramDTO.getGraphicFile(), type);
				String realpath = ResourceLocator.getI18NMessage(this, Constants.MSG_KEY_HOST_ADDRESS) + filePath;
				paramEntity.setGraphicContent(realpath);
			}
			iGraphicService.addGraphic(paramEntity);

		} catch (Exception e) {
			paramDTO.setErrFlg(true);
			resultClientDTO.setReturnCode("-7300");

		}
		// return 处理
		if (!paramDTO.isErrFlg()) {
			resultClientDTO.setReturnCode("0");
			//
		}
		// 返回结果
		toJson(response, resultClientDTO);

		return null;
	}
	
	
	/**
	 * 获取聊天记录
	 * 
	 * @param mapping
	 *            The ActionMapping used to select this instance
	 * @param form
	 *            The optional ActionForm bean for this request
	 * @param request
	 *            The servlet request we are processing
	 * @param response
	 *            The servlet response we are creating
	 * 
	 * @exception Exception
	 *                if business logic throws an exception
	 */
	public ActionForward doGraphicList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		// 参数DTO
		GraphicDTO paramDTO = (GraphicDTO) form;
		// 参数Entity
		AppointInquiryEntity paramEntity = new AppointInquiryEntity();

		// 参数赋值
		paramEntity.setAppointId(paramDTO.getAppointId());
	
		// 结果Entity
		AppointInquiryEntity resultEntity = null;
		 GraphicClientDTO resultClientDTO = new GraphicClientDTO();
		 List<GraphicInfoClientDTO> resultClient=null;
		// DB查询
		try {
			
			resultEntity=iAppointInquiryService.getGraphicList(paramEntity);
		if(resultEntity!=null){
			resultClientDTO.setDoctorPic(resultEntity.getHeadPic());
			resultClientDTO.setPatientPic(resultEntity.getPatientPic());
			resultClientDTO.setPatientName(resultEntity.getPatientName());
			resultClientDTO.setDoctorName(resultEntity.getDoctorName());
			resultClientDTO.setAppointId(resultEntity.getAppointId());
			resultClientDTO.setFollowFlag(resultEntity.getFollowFlag());
			resultClientDTO.setFreeFlag(resultEntity.getFreeFlag());
			resultClientDTO.setFreeTotal(resultEntity.getFreeTotal());
			resultClientDTO.setSex(resultEntity.getSex());
			if(resultEntity.getAge()!=null){
			resultClientDTO.setBirth(CommonUtil.dateToString(resultEntity.getAge(), "yyyy-MM-dd"));
			}
			if(resultEntity.getGraphicEntitys()!=null && resultEntity.getGraphicEntitys().size()>0){
				
				if("1".equals(resultEntity.getFreeFlag())){
					resultClientDTO.setSupTotal(resultEntity.getFreeTotal());
				
				if(resultEntity.getGraphicEntitys().get(0).getRecordTime()!=null){
					Date insertDate = null;
					Date now = null;
					Calendar cal = Calendar.getInstance();
					
					cal.setTime(resultEntity.getGraphicEntitys().get(0).getRecordTime());
					cal.add(Calendar.DATE, 1);// 24小时制
					insertDate = cal.getTime();
				
					cal.setTime(new Date());
					 now= cal.getTime();
					int time = now.compareTo(insertDate);
					if (time > 0) {
						resultClientDTO.setSupTotal(0);
					}
				}}
				resultClient=new ArrayList<GraphicInfoClientDTO>();
				for(GraphicEntity param :resultEntity.getGraphicEntitys()){
					GraphicInfoClientDTO paramClient=new   GraphicInfoClientDTO();
					paramClient.setGraphicContent(param.getGraphicContent());
					paramClient.setGraphicType(param.getGraphicType());
					paramClient.setRole(param.getRole());
					resultClient.add(paramClient);
				}
				resultClientDTO.setGraphicList(resultClient);
			}
		}
		} catch (Exception e) {
			paramDTO.setErrFlg(true);
			resultClientDTO.setReturnCode("-7300");

		}
		// return 处理
		if (!paramDTO.isErrFlg()) {
			resultClientDTO.setReturnCode("0");
			//
		}
		// 返回结果
		toJson(response, resultClientDTO);

	return null;
	}
}
